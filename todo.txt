2020.07.20 删除zm-stomp项目下的websocket文件

note
	操作系统之线程和进程（用户态和内核态，一对多，多对多）
	lc weekly competition
code

video

source
	jdk
	
	
	020-08-10 09:46:04.975  INFO 10 --- [http-nio-8018-exec-2] c.l.f.s.k.c.resource.CallbackResource    : request:{"short_group": -1, "fmp_error": 0, "event_type": 0, "photo": "", "fmp": 0.00010294900130247697, "quality": 0.522566556930542, "temperature": 0.0, "confidence": 11.7566595, "group": -1, "uuid": "e6417b68-0b89-47bc-9bbd-7a2f2311151b", "gender": -1, "age": -1, "photo_md5": "0f122219f6ea7c122e44a716774141d4", "screen_token": "9ca5df35-bb1a-4fcb-935a-0410b4ea3579", "timestamp": 1597023963, "subject_id": null}9f6ea7c122e44a716774141d4", "screen_token": "9ca5df35-bb1a-4fcb-935a-0410b4ea3579", "timestamp": 159702

//		Map<String, String> map1 = new HashMap<String, String>();
//		Enumeration headerNames = request.getHeaderNames();
//		while (headerNames.hasMoreElements()) {
//			String key = (String) headerNames.nextElement();
//			String value = request.getHeader(key);
//			logger.info("header , {}: {}",key,value);
//			map1.put(key, value);
//		}
//
//		Map map = new HashMap();
//		Enumeration paramNames = request.getParameterNames();
//		while (paramNames.hasMoreElements()) {
//			String paramName = (String) paramNames.nextElement();
//
//			String[] paramValues = request.getParameterValues(paramName);
//			if (paramValues.length == 1) {
//				String paramValue = paramValues[0];
//				if (paramValue.length() != 0) {
//					logger.info("参数：" + paramName + "=" + paramValue);
//					map.put(paramName, paramValue);
//				}
//			}
//		}
//
//		try {
//			ServletInputStream inputStream = request.getInputStream();
//			BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
//			byte[] b = new byte[1024];
//			char[] c = new char[128];
//			int count = 0;
//			StringBuilder sb = new StringBuilder();
//			while ((count = reader.read(c)) > 0) {
//				sb.append(c);
//			}
//			logger.info("request:" + sb);
//		} catch (IOException e) {
//			logger.info("出现异常");
//			e.printStackTrace();
//		}




{
	"地点":[],
	"活动"：[]
}



batchExport(){

}

client 
	/**
	 * 根据用户名查询出用户信息
	 *
	 */
	@GetMapping("/info/name")
	UserInfo findInfoByName(@RequestParam("username") String username);
	
resource .antMatchers("/generator/token/password").permitAll()
generator 
	@GetMapping("/token/password")
	public ApiResponse<Oauth2TokenInfoForm> getToken(
			@ApiParam("用户名") @RequestParam("username") String username,
			@ApiParam("密码") @RequestParam("password") String password,
			@ApiParam(value = "用于oauth2的客户端id") @RequestParam("client_id") String clientId,
			@ApiParam(value = "用于oauth2的客户端密码") @RequestParam("client_secret") String clientSecret)
			throws HttpRequestMethodNotSupportedException {
		UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(
				clientId, clientSecret, Collections.emptyList());
		Map<String, String> parameters = new HashMap<>(16);
		parameters.put("username", username);
		parameters.put("password", password);
		parameters.put("grant_type", "password");
		parameters.put("scope", "read");
		parameters.put("client_id", clientId);
		parameters.put("client_secret", clientSecret);
		ResponseEntity<OAuth2AccessToken> oAuth2AccessTokenResponse = tokenEndpoint
				.postAccessToken(authRequest, parameters);

		Oauth2TokenInfoForm form = new Oauth2TokenInfoForm();
		UserInfo userInfo = userClient.findInfoByName(username);
		form.setUserInfo(userInfo);
		form.setoAuth2AccessToken(oAuth2AccessTokenResponse.getBody());
		return new ApiResponse<>(form);
	}
form 
package com.lianxin.fr.passport.resource;

import com.lianxin.account.core.bean.view.UserInfo;
import org.springframework.security.oauth2.common.OAuth2AccessToken;

public class Oauth2TokenInfoForm {
	private OAuth2AccessToken oAuth2AccessToken;

	private UserInfo userInfo;

	public OAuth2AccessToken getoAuth2AccessToken() {
		return oAuth2AccessToken;
	}

	public void setoAuth2AccessToken(OAuth2AccessToken oAuth2AccessToken) {
		this.oAuth2AccessToken = oAuth2AccessToken;
	}

	public UserInfo getUserInfo() {
		return userInfo;
	}

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
	}
}

userResource

	@GetMapping("/info/name")
	public UserInfo findInfoByName(@RequestParam("username") String username) {
		Optional<UserInfo> userInfoOptional = service.findInfoByName(username);
		return userInfoOptional.orElse(null);

	}
	/**
	 * 根据用户名查询用户信息
	 *
	 * @param username
	 *            用户名
	 */
	Optional<UserInfo> findInfoByName(String username);
	@Override
	public Optional<UserInfo> findInfoByName(String username) {
		QueryWrapper<User> queryWrapper = new QueryWrapper<>();
		queryWrapper.eq("account", username);
		queryWrapper.eq("state", 1);
		User user = repository.selectOne(queryWrapper);
		if (Objects.isNull(user)) {
			return Optional.empty();
		}
		UserInfo userInfo = new UserInfo();
		// 用户本身
		userInfo.setUser(user);
		// 人员info
		PersonInfo personInfo = personService.findInfoById(user.getPersonId());
		userInfo.setPersonInfo(personInfo);
		// 角色集合
		List<Role> roles = roleService.findByUserId(user.getId());
		userInfo.setRoles(roles);
		return Optional.of(userInfo);

	}
	
	园区：
	添加地址的notNUll
	查询园区时：需要根据hostiD去查询，返回值需要添加host主机的名称
	新增、更新园区时：如果hostid！= null，需要判断host是否已经被关联
	删除园区时，需要更新host
	
	host：添加新增host和删除host
	查询host的时候，返回关联的园区
	删除host时，如果关联了园区，无法删除
	


package com.lianxin.zm.helper.api.resource.person;

import com.lianxin.zm.helper.api.client.PersonClient;
import com.lianxin.zm.helper.api.client.VisitorClient;
import com.lianxin.zm.helper.api.resource.BindPhoneForm;
import com.lianxin.zm.helper.api.resource.visitor.VisitorUpdateForm;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import com.lianxin.common.exception.BadRequestException;
import com.lianxin.zm.meta.api.ApiErrorCode;

/**
 * 人员手机号重复验证
 */
public class PersonPhoneExistInVisitorValidator implements Validator {

	private final VisitorClient visitorClient;

	public PersonPhoneExistInVisitorValidator(VisitorClient visitorClient) {
		this.visitorClient = visitorClient;
	}

	@Override
	public boolean supports(Class<?> aClass) {
		return true;
	}

	@Override
	public void validate(Object target, Errors errors) {
		BindPhoneForm form = (BindPhoneForm) target;
		Boolean exist = visitorClient.existsByPhone(form.getPhone(), null);
		if (exist) {
			throw new BadRequestException(ApiErrorCode.CODE_20008017);
		}
	}
}


http://127.0.0.1:8068


package com.lianxin.zm.helper.api.resource.visitor;

import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import com.lianxin.common.exception.BadRequestException;
import com.lianxin.zm.helper.api.client.PersonClient;
import com.lianxin.zm.meta.api.ApiErrorCode;

/**
 * 访客手机号重复验证
 */
public class VisitorPhoneExistInPersonValidator implements Validator {

	private final PersonClient personClient;

	private final String phone;

	public VisitorPhoneExistInPersonValidator(PersonClient personClient,
			String phone) {
		this.personClient = personClient;
		this.phone = phone;
	}

	@Override
	public boolean supports(Class<?> aClass) {
		return true;
	}

	@Override
	public void validate(Object object, Errors errors) {
		if (personClient.existsByPhone(phone, null)) {
			throw new BadRequestException(ApiErrorCode.CODE_20008017);
		}
	}
}


批量导入：
验证： 民族代码格式验证 限制20 10
批量导出：

code 

		// 获取状态正常的部门
		List<Dept> departments = super.findAll();

		List<Person> persons = personService.findAll();
		Map<Long, List<Person>> personMap = persons.stream()
				.collect(Collectors.groupingBy(Person::getId));

		List<TreeNode<DeptAndPersonTreeNode>> personTreeNodes = new ArrayList<>();

		// 构建部门的节点
		List<TreeNode<DeptAndPersonTreeNode>> deptTreeNodes = departments
				.stream().map(dept -> {

					DeptAndPersonTreeNode node = new DeptAndPersonTreeNode();
					node.setId(dept.getId());
					node.setName(dept.getName());
					node.setType(1);

					TreeNode<DeptAndPersonTreeNode> treeNode = new TreeNode<>();
					treeNode.setId(TreeDef.prefix.DEPT + dept.getId());

					if (dept.getParentId().equals(0L)) {
						treeNode.setParentId(dept.getParentId().toString());
					} else {
						treeNode.setParentId(
								TreeDef.prefix.DEPT + dept.getParentId());
					}

					treeNode.setData(node);

					// 构建person节点
					List<Person> tempPersons = personMap.get(dept.getId());
					if (CollectionUtils.isNotEmpty(tempPersons)) {
						tempPersons.forEach(person -> {

							DeptAndPersonTreeNode personNode = new DeptAndPersonTreeNode();
							personNode.setId(person.getId());
							personNode.setName(person.getName());
							personNode.setType(2);

							TreeNode<DeptAndPersonTreeNode> personTreeNode = new TreeNode<>();
							personTreeNode.setId(
									TreeDef.prefix.PERSON + person.getId());
							personTreeNode.setParentId(
									TreeDef.prefix.DEPT + dept.getId());
							personTreeNode.setData(personNode);

							personTreeNodes.add(personTreeNode);
						});
					}

					return treeNode;

				}).collect(Collectors.toList());

		deptTreeNodes.addAll(personTreeNodes);



