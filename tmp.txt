public class SMSCodeTokenGranter extends AbstractTokenGranter {

private static final String GRANT_TYPE = "sms_code";
private static final int CODE_LENGTH = 6;
private final AuthenticationManager authenticationManager;

public SMSCodeTokenGranter(AuthorizationServerTokenServices tokenServices,
                                    ClientDetailsService clientDetailsService, OAuth2RequestFactory requestFactory,final AuthenticationManager authenticationManager) {
super(tokenServices, clientDetailsService, requestFactory, GRANT_TYPE);
this.authenticationManager = authenticationManager;
    }


 @Override
protected OAuth2Authentication getOAuth2Authentication(ClientDetails client,
                                                           TokenRequest tokenRequest) {

        Map<String, String> parameters = new LinkedHashMap<String, String>(tokenRequest.getRequestParameters());
        String userMobileNo = parameters.get("username");  //客户端提交的用户名
if(!RegexUtils.regexPhoneNum(userMobileNo)){
throw new InvalidGrantException("手机号码格式错误");
        }
        String smscode = parameters.get("code");  //客户端提交的验证码
if(StringUtils.isEmpty(smscode)||smscode.length()!=CODE_LENGTH ){
throw new InvalidGrantException("验证码错误");
        }
        Authentication userAuth = new SmsCodeAuthenticationToken(userMobileNo,smscode);
        ((AbstractAuthenticationToken) userAuth).setDetails(parameters);

try {
            userAuth = authenticationManager.authenticate(userAuth);//调用上面的provide 验证
        }
catch (AccountStatusException ase) {
//covers expired, locked, disabled cases (mentioned in section 5.2, draft 31)
throw new InvalidGrantException(ase.getMessage());
        } catch (BadCredentialsException e) {
// If the username/password are wrong the spec says we should send 400/invalid grant
throw new InvalidGrantException(e.getMessage());
        }
if (userAuth == null || !userAuth.isAuthenticated()) {
throw new InvalidGrantException("Could not authenticate user: " + userMobileNo);
        }
        OAuth2Request storedOAuth2Request = getRequestFactory().createOAuth2Request(client, tokenRequest);
return new OAuth2Authentication(storedOAuth2Request, userAuth);


1,2
1

    /**
     * 告警名称，区分唯一性，方便控制告警时间间隔
     */
    private String alarmName;
    
    /**
     * 告警类型
     */
    private AlarmTypeEnum alarmType;
    
    /**
     * 告警消息
     */
    private String message;
    
    /**
     * 钉钉机器人access_token
     */
    private String accessToken;
    
    /**
     * 钉钉机器人secret
     */
    private String secret;
    
    /**
     * 对接外部API地址
     */
    private String apiUrl;
    
    /**
     * 告警时间间隔，单位分钟阿斯顿发
     */
    private int alarmTimeInterval = 1;

























    }